#+TITLE: Anaplan OAuth2 Tutorial
#+AUTHOR: Michael B. Moore
#+EMAIL: setikites@gmail.com
#+DATE: 2024-11-25

** Install
The steps below outline how to use the OAuth2 Authorization Grant
Type flow to obtain an access token and fetch a protected resource. In
this example the provider is Anaplan and the protected resource is the
user’s profile.


create a virtual environment
#+begin_src shell :session shell
  python -m venv venv
#+end_src

activate a virtual environment (non-Windows)
#+begin_src shell :session shell
  . venv/bin/activate
#+end_src

activate a virtual environment (Windows)
#+begin_src shell :session shell
  venv\Scripts\activate
#+end_src

add the required packages
- requests-oauthlib :: for managing OAuth2 authentication
- flask :: for simple web app
- pyopenssl :: for flask to use https
#+begin_src shell :session shell
  pip install -r requirements.txt
#+end_src


** Run

Setup an OAuth Client in the Anaplan Administration Security
console, (type: Authorization code grant). When you have obtained a
client_id, client_secret, and registered a callback URL then you can
try out the command line interactive example below.  The script
expects to find client_id in shell variable CLIENT and client_secret
in shell variable SECRET.
#+begin_src shell :session shell
  python anaplan.py
#+end_src


OAuth 2 providers may allow you to refresh access tokens using refresh
tokens. Commonly, only clients that authenticate may refresh tokens,
e.g. web applications but not javascript clients. The provider will
mention whether they allow token refresh in their API documentation
and if you see a “refresh_token” in your token response you are good
to go.

This example shows how a simple web application (using the Flask web
framework) can refresh Anaplan OAuth 2 tokens. It should be trivial to
transfer to any other web framework and provider.

Flask runs the development web application at https://127.0.0.1:5000
After the web app sends you to Anaplan to login, it will deliver code
and state values to the redirect URL (https://www.anaplan.com).  You
will need to edit the callback URL to https://127.0.0.1:5000/callback
for the web application to proceed with authentication.  You can use a
bookmarklet to make this edit for you

#+CAPTION: bookmarklet
#+begin_src javascript
  javascript:(function()
              {window.location=window.location.toString().replace(/^https:\/\/www\.anaplan\.com\//,'https://127.0.0.1:5000/callback');})()
#+end_src
#+begin_src shell :session shell
  python main.py
#+end_src

** References
For additional documentation, see the following
*** Anaplan
- https://help.anaplan.com/oauth-clients-f08ae7da-2224-46ff-a8c6-b7eb75d2b65d
- https://community.anaplan.com/discussion/156943/anaplans-authorization-code-grant-api-flow-a-seamless-app-to-app-authentication-option
- https://anaplanoauth2service.docs.apiary.io/#
- https://anaplanauthentication.docs.apiary.io/#
- https://anaplan.docs.apiary.io/#/introduction

*** Python
- https://requests-oauthlib.readthedocs.io/en/latest/index.html
- https://oauthlib.readthedocs.io/en/latest/oauth2/oauth2.html
  
** Inspiration
https://github.com/qkeddy/anaplan-python-oauth-example
